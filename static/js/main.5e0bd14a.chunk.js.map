{"version":3,"sources":["components/Cell.js","components/Board.js","index.js"],"names":["Cell","value","this","props","isRevealed","isMine","neighbour","isFlagged","onClick","cMenu","className","onContextMenu","getValue","React","Component","Board","state","boardData","initBoardData","height","width","mines","gameStatus","mineCount","data","mineArray","map","datarow","dataitem","push","dimension","Math","floor","random","createEmptyArray","plantMines","getNeighbours","i","j","x","y","isEmpty","randomx","randomy","minesPlanted","getRandomNumber","updatedData","mine","traverseBoard","el","setState","revealEmpty","revealBoard","getHidden","length","getFlags","e","preventDefault","getMines","FlagArray","JSON","stringify","handleCellClick","handleContextMenu","renderBoard","Game","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5e0bd14a.chunk.js","sourcesContent":["import React from 'react';\n\nexport default class Cell extends React.Component {\n  getValue() {\n    const {value} = this.props\n\n    if(!value.isRevealed) {\n      return this.props.value.isFlagged ? \"‚ùó\" : null\n    }\n    if(value.isMine) {\n      return \"üí£\"\n    }\n    if (value.neighbour === 0) {\n      return null\n    }\n    return value.neighbour\n  }\n\n  render () {\n    const {value, onClick, cMenu} = this.props\n    let className = \n    'cell' + \n    (value.isRevealed ? '' : ' hidden') +\n    (value.isMine ? ' isMine' : '') +\n    (value.isFlagged ? ' isFlag' : '')\n\n    return (\n      <div \n        className = {className}\n        onClick = {onClick}\n        onContextMenu = {cMenu}\n      >\n        {this.getValue()}\n      </div>\n    )\n  }\n}","import React from 'react';\nimport Cell from './Cell';\n\n//The board component render the entire gameboard\nexport default class Board extends React.Component {\n  state = {\n    boardData: this.initBoardData(this.props.height, this.props.width, this.props.mines),\n    gameStatus: \"Game in progress\",\n    mineCount: this.props.mines,\n  };\n\n  /* Helper Functions */\n\n  // get mines\n  getMines(data) {\n    let mineArray = [];\n\n    data.map(datarow => {\n      datarow.map((dataitem) => {\n        if (dataitem.isMine) {\n          mineArray.push(dataitem);\n        }\n      });\n    });\n\n    return mineArray;\n  }\n\n  // get Flags\n  getFlags(data) {\n    let mineArray = [];\n\n    data.map(datarow => {\n      datarow.map((dataitem) => {\n        if (dataitem.isFlagged) {\n          mineArray.push(dataitem);\n        }\n      });\n    });\n\n    return mineArray;\n  }\n\n  // get Hidden cells\n  getHidden(data) {\n    let mineArray = [];\n\n    data.map(datarow => {\n      datarow.map((dataitem) => {\n        if (!dataitem.isRevealed) {\n          mineArray.push(dataitem);\n        }\n      });\n    });\n\n    return mineArray;\n  }\n\n  // get random number given a dimension\n  getRandomNumber(dimension) {\n    // return Math.floor(Math.random() * dimension);\n    return Math.floor((Math.random() * 1000) + 1) % dimension;\n  }\n\n  // Gets initial board data\n  initBoardData(height, width, mines) {\n    let data = this.createEmptyArray(height, width);\n    data = this.plantMines(data, height, width, mines);\n    data = this.getNeighbours(data, height, width);\n    return data;\n  }\n\n  createEmptyArray(height, width) {\n    let data = [];\n\n    for (let i = 0; i < height; i++) {\n      data.push([]);\n      for (let j = 0; j < width; j++) {\n        data[i][j] = {\n          x: i,\n          y: j,\n          isMine: false,\n          neighbour: 0,\n          isRevealed: false,\n          isEmpty: false,\n          isFlagged: false,\n        };\n      }\n    }\n    return data;\n  }\n\n  // plant mines on the board\n  plantMines(data, height, width, mines) {\n    let randomx, randomy, minesPlanted = 0;\n\n    while (minesPlanted < mines) {\n      randomx = this.getRandomNumber(width);\n      randomy = this.getRandomNumber(height);\n      if (!(data[randomx][randomy].isMine)) {\n        data[randomx][randomy].isMine = true;\n        minesPlanted++;\n      }\n    }\n\n    return (data);\n  }\n\n  // get number of neighbouring mines for each board cell\n  getNeighbours(data, height, width) {\n    let updatedData = data;\n\n    for (let i = 0; i < height; i++) {\n      for (let j = 0; j < width; j++) {\n        if (data[i][j].isMine !== true) {\n          let mine = 0;\n          const area = this.traverseBoard(data[i][j].x, data[i][j].y, data);\n          area.map(value => {\n            if (value.isMine) {\n              mine++;\n            }\n          });\n          if (mine === 0) {\n            updatedData[i][j].isEmpty = true;\n          }\n          updatedData[i][j].neighbour = mine;\n        }\n      }\n    }\n\n    return (updatedData);\n  };\n\n  // looks for neighbouring cells and returns them\n  traverseBoard(x, y, data) {\n    const el = [];\n\n    //up\n    if (x > 0) {\n      el.push(data[x - 1][y]);\n    }\n\n    //down\n    if (x < this.props.height - 1) {\n      el.push(data[x + 1][y]);\n    }\n\n    //left\n    if (y > 0) {\n      el.push(data[x][y - 1]);\n    }\n\n    //right\n    if (y < this.props.width - 1) {\n      el.push(data[x][y + 1]);\n    }\n\n    // top left\n    if (x > 0 && y > 0) {\n      el.push(data[x - 1][y - 1]);\n    }\n\n    // top right\n    if (x > 0 && y < this.props.width - 1) {\n      el.push(data[x - 1][y + 1]);\n    }\n\n    // bottom right\n    if (x < this.props.height - 1 && y < this.props.width - 1) {\n      el.push(data[x + 1][y + 1]);\n    }\n\n    // bottom left\n    if (x < this.props.height - 1 && y > 0) {\n      el.push(data[x + 1][y - 1]);\n    }\n\n    return el;\n  }\n\n  // reveals the whole board\n  revealBoard() {\n    let updatedData = this.state.boardData;\n    updatedData.map((datarow) => {\n      datarow.map((dataitem) => {\n        dataitem.isRevealed = true;\n      });\n    });\n    this.setState({\n      boardData: updatedData\n    })\n  }\n\n  /* reveal logic for empty cell */\n  revealEmpty(x, y, data) {\n    let area = this.traverseBoard(x, y, data);\n    area.map(value => {\n      if (!value.isFlagged && !value.isRevealed && (value.isEmpty || !value.isMine)) {\n        data[value.x][value.y].isRevealed = true;\n        if (value.isEmpty) {\n          this.revealEmpty(value.x, value.y, data);\n        }\n      }\n    });\n    return data;\n\n  }\n\n  // Handle User Events\n\n  handleCellClick(x, y) {\n\n    // check if revealed. return if true.\n    if (this.state.boardData[x][y].isRevealed || this.state.boardData[x][y].isFlagged) return null;\n\n    // check if mine. game over if true\n    if (this.state.boardData[x][y].isMine) {\n      this.setState({ gameStatus: \"You Lost.\" });\n      this.revealBoard();\n    }\n\n    let updatedData = this.state.boardData;\n    updatedData[x][y].isFlagged = false;\n    updatedData[x][y].isRevealed = true;\n\n    if (updatedData[x][y].isEmpty) {\n      updatedData = this.revealEmpty(x, y, updatedData);\n    }\n\n    if (this.getHidden(updatedData).length === this.props.mines) {\n      this.setState({ mineCount: 0, gameStatus: \"You Win.\" });\n      this.revealBoard();\n    }\n\n    this.setState({\n      boardData: updatedData,\n      mineCount: this.props.mines - this.getFlags(updatedData).length,\n    });\n  }\n\n  handleContextMenu(e, x, y) {\n    e.preventDefault();\n    let updatedData = this.state.boardData;\n    let mines = this.state.mineCount;\n\n    // check if already revealed\n    if (updatedData[x][y].isRevealed) return;\n\n    if (updatedData[x][y].isFlagged) {\n      updatedData[x][y].isFlagged = false;\n      mines++;\n    } else {\n      updatedData[x][y].isFlagged = true;\n      mines--;\n    }\n\n    if (mines === 0) {\n      const mineArray = this.getMines(updatedData);\n      const FlagArray = this.getFlags(updatedData);\n      if (JSON.stringify(mineArray) === JSON.stringify(FlagArray)) {\n        this.setState({ mineCount: 0, gameStatus: \"You Win.\" });\n        this.revealBoard();\n      }\n    }\n\n    this.setState({\n      boardData: updatedData,\n      mineCount: mines,\n    });\n  }\n\n  renderBoard(data) {\n    return data.map((datarow) => {\n      return datarow.map((dataitem) => {\n        return (\n          <div key={dataitem.x * datarow.length + dataitem.y}>\n            <Cell\n              onClick={() => this.handleCellClick(dataitem.x, dataitem.y)}\n              cMenu={(e) => this.handleContextMenu(e, dataitem.x, dataitem.y)}\n              value={dataitem}\n            />\n            {(datarow[datarow.length - 1] === dataitem) ? <div className=\"clear\" /> : \"\"}\n          </div>);\n      })\n    });\n\n  }\n\n  render() {\n    return (\n      <div className=\"board\">\n        <div className=\"game-info\">\n          <span className=\"info\">Mines remaining: {this.state.mineCount}</span>\n          <h1 className=\"info\">{this.state.gameStatus}</h1>\n        </div>\n        {\n          this.renderBoard(this.state.boardData)\n        }\n      </div>\n    );\n  }\n}","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport Board from './components/Board';\nimport './index.css'\n\nclass Game extends React.Component {\n  state = {\n      height: 8,\n      width: 8,\n      mines: 10\n    }\n\n  render() {\n    const { height, width, mines } = this.state;\n    return(\n      <div className=\"game\">\n        <Board height={height} width={width} mines={mines} />\n      </div>\n    )\n  }\n}\n\nReactDOM.render(\n  <Game />,\n  document.getElementById('root')\n)"],"sourceRoot":""}