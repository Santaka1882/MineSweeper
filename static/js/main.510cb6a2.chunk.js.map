{"version":3,"sources":["components/Cell.js","components/Board.js","index.js"],"names":["Cell","value","this","props","isRevealed","isMine","neighbour","isFlagged","onClick","cMenu","className","onContextMenu","getValue","React","Component","Board","state","boardData","initBoardData","height","width","mines","gameStatus","mineCount","mineProtect","data","mineArray","map","datarow","dataitem","push","x","y","updatedData","randomX","getRandomNumber","randomY","getNeighbours","console","log","setState","handleCellClick","dimension","Math","floor","random","createEmptyArray","plantMines","i","j","isEmpty","randomx","randomy","minesPlanted","mine","traverseBoard","el","revealEmpty","resetFirstBomb","revealBoard","getHidden","length","getFlags","e","preventDefault","getMines","FlagArray","JSON","stringify","handleContextMenu","renderBoard","Game","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.510cb6a2.chunk.js","sourcesContent":["import React from 'react';\n\nexport default class Cell extends React.Component {\n  getValue() {\n    const {value} = this.props\n\n    if(!value.isRevealed) {\n      return this.props.value.isFlagged ? \"‚ùó\" : null\n    }\n    if(value.isMine) {\n      return \"üí£\"\n    }\n    if (value.neighbour === 0) {\n      return null\n    }\n    return value.neighbour\n  }\n\n  render () {\n    const {value, onClick, cMenu} = this.props\n    let className = \n    'cell' + \n    (value.isRevealed ? '' : ' hidden') +\n    (value.isMine ? ' isMine' : '') +\n    (value.isFlagged ? ' isFlag' : '')\n\n    return (\n      <div \n        className = {className}\n        onClick = {onClick}\n        onContextMenu = {cMenu}\n      >\n        <span>{this.getValue()}</span>\n      </div>\n    )\n  }\n}","import React from 'react';\nimport Cell from './Cell';\n\n//The board component render the entire gameboard\nexport default class Board extends React.Component {\n  state = {\n    boardData: this.initBoardData(this.props.height, this.props.width, this.props.mines),\n    gameStatus: \"Game in progress\",\n    mineCount: this.props.mines,\n    mineProtect: true\n  };\n\n  /* Helper Functions */\n\n  // get mines\n  getMines(data) {\n    let mineArray = [];\n\n    data.map(datarow => {\n      datarow.map((dataitem) => {\n        if (dataitem.isMine) {\n          mineArray.push(dataitem);\n        }\n      });\n    });\n\n    return mineArray;\n  }\n\n  // get Flags\n  getFlags(data) {\n    let mineArray = [];\n\n    data.map(datarow => {\n      datarow.map((dataitem) => {\n        if (dataitem.isFlagged) {\n          mineArray.push(dataitem);\n        }\n      });\n    });\n\n    return mineArray;\n  }\n\n  // get Hidden cells\n  getHidden(data) {\n    let mineArray = [];\n\n    data.map(datarow => {\n      datarow.map((dataitem) => {\n        if (!dataitem.isRevealed) {\n          mineArray.push(dataitem);\n        }\n      });\n    });\n\n    return mineArray;\n  }\n\n  resetFirstBomb(x, y) {\n    //check if first mine, if yes, return\n    if(!this.state.mineProtect) return;\n\n    //change the location of the mine and click that cell\n    let updatedData = this.state.boardData\n    if (updatedData[x][y].isMine) {\n      updatedData[x][y].isMine = false\n      let randomX = this.getRandomNumber(this.props.width)\n      let randomY = this.getRandomNumber(this.props.height)\n      if(!updatedData[randomX][randomY].isMine && updatedData[randomX][randomY] !== updatedData[x][y]) {\n        updatedData[randomX][randomY].isMine = true\n        updatedData[randomX][randomY].isRevealed = false\n        updatedData = this.getNeighbours(updatedData, this.props.height, this.props.width)\n      }\n    }\n    console.log(updatedData)\n    this.setState({\n      boardData: updatedData,\n      mineProtect: false\n    })\n    this.handleCellClick(x, y)\n  }\n\n  // get random number given a dimension\n  getRandomNumber(dimension) {\n    // return Math.floor(Math.random() * dimension);\n    return Math.floor((Math.random() * 1000) + 1) % dimension;\n  }\n\n  // Gets initial board data\n  initBoardData(height, width, mines) {\n    let data = this.createEmptyArray(height, width);\n    data = this.plantMines(data, height, width, mines);\n    data = this.getNeighbours(data, height, width);\n    return data;\n  }\n\n  createEmptyArray(height, width) {\n    let data = [];\n\n    for (let i = 0; i < height; i++) {\n      data.push([]);\n      for (let j = 0; j < width; j++) {\n        data[i][j] = {\n          x: i,\n          y: j,\n          isMine: false,\n          neighbour: 0,\n          isRevealed: false,\n          isEmpty: false,\n          isFlagged: false,\n        };\n      }\n    }\n    return data;\n  }\n\n  // plant mines on the board\n  plantMines(data, height, width, mines) {\n    let randomx, randomy, minesPlanted = 0;\n\n    while (minesPlanted < mines) {\n      randomx = this.getRandomNumber(width);\n      randomy = this.getRandomNumber(height);\n      if (!(data[randomx][randomy].isMine)) {\n        data[randomx][randomy].isMine = true;\n        minesPlanted++;\n      }\n    }\n\n    return (data);\n  }\n\n  // get number of neighbouring mines for each board cell\n  getNeighbours(data, height, width) {\n    let updatedData = data;\n\n    for (let i = 0; i < height; i++) {\n      for (let j = 0; j < width; j++) {\n        if (data[i][j].isMine !== true) {\n          let mine = 0;\n          const area = this.traverseBoard(data[i][j].x, data[i][j].y, data);\n          area.map(value => {\n            if (value.isMine) {\n              mine++;\n            }\n          });\n          if (mine === 0) {\n            updatedData[i][j].isEmpty = true;\n          }\n          updatedData[i][j].neighbour = mine;\n        }\n      }\n    }\n\n    return updatedData;\n  };\n\n  // looks for neighbouring cells and returns them\n  traverseBoard(x, y, data) {\n    const el = [];\n\n    //up\n    if (x > 0) {\n      el.push(data[x - 1][y]);\n    }\n\n    //down\n    if (x < this.props.height - 1) {\n      el.push(data[x + 1][y]);\n    }\n\n    //left\n    if (y > 0) {\n      el.push(data[x][y - 1]);\n    }\n\n    //right\n    if (y < this.props.width - 1) {\n      el.push(data[x][y + 1]);\n    }\n\n    // top left\n    if (x > 0 && y > 0) {\n      el.push(data[x - 1][y - 1]);\n    }\n\n    // top right\n    if (x > 0 && y < this.props.width - 1) {\n      el.push(data[x - 1][y + 1]);\n    }\n\n    // bottom right\n    if (x < this.props.height - 1 && y < this.props.width - 1) {\n      el.push(data[x + 1][y + 1]);\n    }\n\n    // bottom left\n    if (x < this.props.height - 1 && y > 0) {\n      el.push(data[x + 1][y - 1]);\n    }\n\n    return el;\n  }\n\n  // reveals the whole board\n  revealBoard() {\n    let updatedData = this.state.boardData;\n    updatedData.map((datarow) => {\n      datarow.map((dataitem) => {\n        dataitem.isRevealed = true;\n      });\n    });\n    this.setState({\n      boardData: updatedData\n    })\n  }\n\n  /* reveal logic for empty cell */\n  revealEmpty(x, y, data) {\n    let area = this.traverseBoard(x, y, data);\n    area.map(value => {\n      if (!value.isFlagged && !value.isRevealed && (value.isEmpty || !value.isMine)) {\n        data[value.x][value.y].isRevealed = true;\n        if (value.isEmpty) {\n          this.revealEmpty(value.x, value.y, data);\n        }\n      }\n    });\n    return data;\n\n  }\n\n  // Handle User Events\n\n  handleCellClick(x, y) {\n    // check if revealed. return if true.\n    if (this.state.boardData[x][y].isRevealed || this.state.boardData[x][y].isFlagged) return null;\n\n    //check if the first cell clicked is mine, if yes reset the bomb\n    if(this.state.boardData[x][y].isMine && this.state.mineProtect) {\n      this.resetFirstBomb(x, y)\n    }\n    // check if mine. game over if true\n    if (this.state.boardData[x][y].isMine && !this.state.mineProtect) {\n      this.setState({ gameStatus: \"You Lost.\" });\n      this.revealBoard();\n    }\n\n    let updatedData = this.state.boardData;\n    updatedData[x][y].isFlagged = false;\n    updatedData[x][y].isRevealed = true;\n\n    if (updatedData[x][y].isEmpty) {\n      updatedData = this.revealEmpty(x, y, updatedData);\n    }\n\n    if (this.getHidden(updatedData).length === this.props.mines) {\n      this.setState({ mineCount: 0, gameStatus: \"You Win.\" });\n      this.revealBoard();\n    }\n\n    this.setState({\n      boardData: updatedData,\n      mineCount: this.props.mines - this.getFlags(updatedData).length,\n      mineProtect: false\n    });\n  }\n\n  handleContextMenu(e, x, y) {\n    e.preventDefault();\n    let updatedData = this.state.boardData;\n    let mines = this.state.mineCount;\n\n    // check if already revealed\n    if (updatedData[x][y].isRevealed) return;\n    if (this.getFlags(updatedData).length === this.props.mines && updatedData[x][y].isFlagged === false) return;\n\n    if (updatedData[x][y].isFlagged) {\n      updatedData[x][y].isFlagged = false;\n      mines++;\n    } else {\n      updatedData[x][y].isFlagged = true;\n      mines--;\n    }\n\n    if (mines === 0) {\n      const mineArray = this.getMines(updatedData);\n      const FlagArray = this.getFlags(updatedData);\n      if (JSON.stringify(mineArray) === JSON.stringify(FlagArray)) {\n        this.setState({ mineCount: 0, gameStatus: \"You Win.\" });\n        this.revealBoard();\n      }\n    }\n\n    this.setState({\n      boardData: updatedData,\n      mineCount: mines,\n    });\n  }\n\n  renderBoard(data) {\n    return data.map((datarow) => {\n      return datarow.map((dataitem) => {\n        return (\n          <div key={dataitem.x * datarow.length + dataitem.y} className='cell-container'>\n            <Cell\n              onClick={() => this.handleCellClick(dataitem.x, dataitem.y)}\n              cMenu={(e) => this.handleContextMenu(e, dataitem.x, dataitem.y)}\n              value={dataitem}\n            />\n            {(datarow[datarow.length - 1] === dataitem) ? <div className=\"clear\" /> : \"\"}\n          </div>);\n      })\n    });\n\n  }\n\n  render() {\n    return (\n      <div className=\"board\">\n        <div className=\"game-info\">\n          <span className=\"info\">Mines remaining: {this.state.mineCount}</span>\n          <h1 className=\"info\">{this.state.gameStatus}</h1>\n        </div>\n        <div className='cell-wrapper'>\n        {\n          this.renderBoard(this.state.boardData)\n        }\n        </div>\n      </div>\n    );\n  }\n}","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport Board from './components/Board';\nimport './index.css'\n\nclass Game extends React.Component {\n  state = {\n      height: 8,\n      width: 8,\n      mines: 10\n    }\n\n  render() {\n    const { height, width, mines } = this.state;\n    return(\n      <div className=\"game\">\n        <Board height={height} width={width} mines={mines} />\n      </div>\n    )\n  }\n}\n\nReactDOM.render(\n  <Game />,\n  document.getElementById('root')\n)"],"sourceRoot":""}